//Planetar main game code file
ct U[25] game_palette = U[25](
    $13, $21, $3B,
    $13, $21, $3B,
    $15, $23, $31,
    $17, $25, $33,

    $02, $14, $26,
    $04, $16, $28,
    $06, $18, $2A,
    $08, $1A, $2C,

    $0f)
struct Bullet
    UF x
    UF y
    SF xspeed
    SF yspeed
    U life

macro("pool_contiguous", "Bullet", "8", "bullets")

struct Enemy
    U x
    U y
    U t //type
    U s //speed
    U d //direction

macro("pool_contiguous", "Enemy", "32", "enemies")

data /sprites
    // Here's where we define our metasprite, comprised of four 8x8 tiles:
    [] my_metasprite
        (make_metasprite(0, Ms{}(
            Ms(-8, -8, $20, $00),
            Ms( 0, -8, $21, $00),
            Ms(-8,  0, $22, $00),
            Ms( 0,  0, $23, $00))))

vars
    // Player variables:
    UF px = 128
    UF py = 120
    UF bulletdelay = 1
    UF bulletdelaymax = 40
    SF pxspeed = 0
    SF pyspeed = 0
    SF bxspeed = 0
    SF byspeed = 0
    //Health:
    U phealth = 3
    U plifes = 1
    //U score =0
    U[4] score = U[4](0)

mode game()
: nmi game_nmi
    //Health Start Values:
    //score = 0
    score = U[4](0)
    U edelay = 61
    U ecdelay = 0
    phealth=3
    plifes=1
    U nextwave =0
    U cwaves =0
    palette = game_palette
    
    puf.init(system)
    //puf.play_track(puf1_music)
    U speed = puf.play_track(0)
    ppu_upload_palette()
    {PPUCTRL}(PPUCTRL_NMI_ON)
    
    // Randomly setup some enemies:
    //seed(123)
    nextwave = enemies_max-1
    //for U i = 0; i < enemies_max; i += 1
    //    enemies_new(Enemy(rand(), randb(240),randb(4),randb(2),randb(3)))
    state(M30_CHR(4)) //game chr (CHR4)
    while true
        if enemies_num == 0
            nextwave = enemies_max-1
            cwaves +=1
            edelay -=1
            if edelay == 0
                edelay =1
            
        update_pads()
        move_player()
        //if pads[0].pressed & BUTTON_A
        //    bullets_new(Bullet(px, py, SF(pxspeed * 2), SF(pyspeed * 2), 60))
        byspeed = 0
        bxspeed = 0
        if pads[1].held & BUTTON_LEFT // up should be right
            byspeed = -2
        else if pads[1].held & BUTTON_RIGHT // down should be left
            byspeed = 2
        if pads[1].held & BUTTON_DOWN // left should be UP
            bxspeed = -2
        else if pads[1].held & BUTTON_UP // right should be down
            bxspeed = 2
            
        if pads[1].held & BUTTON_DPAD && bulletdelay == 0
            bullets_new(Bullet(px, py, SF(bxspeed), SF(byspeed), 60))
            bulletdelay = bulletdelaymax
        if bulletdelay > 0
            bulletdelay -=1
        
        
        if nextwave > 0 && ecdelay >= edelay
                enemies_new(Enemy(rand(), randb(240),randb(4),randb(2),randb(3)))
                nextwave-=1
                ecdelay = 0
        ecdelay +=1
        
        collide_bullets()
        collide_player()
        move_bullets()
        move_enemies()
        update_sprites()
        if phealth <= 0
            plifes -=1
            
        if phealth <=0 || pads[0].pressed & BUTTON_SELECT
            goto mode gameover()
            : preserves
        //UU i = 0
        //U[5] array = uu_to_ddddd(i)
        //do for U i = 4; i != $FF; i -= 1
        //    {PPUDATA}(array[i] + $10)
        nmi

fn inc_score()
    for U i = 0; i < len(score); i += 1
        //if i == 2
        //    pspeed += 0.0625

        score[i] += 1
        if score[i] == 10
            score[i] = 0
        else
            break
            
fn move_player()
    ct Real ACCEL = 0.125

    if pads[0].held & BUTTON_DOWN // left should be up
        pxspeed -= ACCEL
    else if pads[0].held & BUTTON_UP // right should be down
        pxspeed += ACCEL

    if pads[0].held & BUTTON_LEFT // up should  be left
        pyspeed -= ACCEL
    else if pads[0].held & BUTTON_RIGHT // down should be right
        pyspeed += ACCEL

    px += pxspeed
    py += pyspeed

fn move_bullets()
    for U i = 0; i < bullets_num;
        bullets[i].x += bullets[i].xspeed
        bullets[i].y += bullets[i].yspeed
        if bullets[i].life -= 1 // If the subtraction doesn't underflow.
            i += 1
        else
            bullets_delete(i)



fn move_enemies()
    for U i = 0; i < enemies_num; i += 1
        if enemies[i].t==0
            if enemies[i].d==0
                enemies[i].x += 1
            else if enemies[i].d==1
                enemies[i].x -= 1
            else if enemies[i].d==2
                enemies[i].y += 1
            else if enemies[i].d==3
                enemies[i].y -=1
        else if enemies[i].t==1
            if enemies[i].x > px
                enemies[i].x -=1
            if enemies[i].x < px
                enemies[i].x +=1
            if enemies[i].y > py
                enemies[i].y -=1
            if enemies[i].y < py
                enemies[i].y +=1
        else if enemies[i].t==2
            if enemies[i].x < px
                enemies[i].x -=1
            if enemies[i].x > px
                enemies[i].x +=1
            if enemies[i].y < py
                enemies[i].y -=1
            if enemies[i].y > py
                enemies[i].y +=1
        else if enemies[i].t==3
            if enemies[i].d==0
                enemies[i].x += 1
            else if enemies[i].d==1
                enemies[i].x -= 1
            else if enemies[i].d==2
                enemies[i].y += 1
            else if enemies[i].d==3
                enemies[i].y -=1
            enemies[i].s+=1
            if enemies[i].s>20
                enemies[i].s=0
                enemies[i].d+=1
            if enemies[i].d>3
                enemies[i].d=0


// Helper function for geometry.fab library:
fn bullet_rect(U i) Rect
    return Rect(Coord(bullets[i].x.a, bullets[i].y.a), Dimen(8, 8))

// Helper function for geometry.fab library:
fn enemy_rect(U i) Rect
    return Rect(Coord(enemies[i].x, enemies[i].y), Dimen(8, 8))
    
// Helper function for geometry.fab library:
fn player_rect() Rect
    return Rect(Coord(px.a, py.a), Dimen(16, 16))

fn collide_bullets()
    for U i = 0; i < bullets_num;
        for U j = 0; j < enemies_num;
            if overlap(bullet_rect(i), enemy_rect(j)) // If they collide:
                inc_score()
                bullets_delete(i)
                enemies_delete(j)
                goto next_iter
            else
                j += 1
        i += 1
        label next_iter
        
fn collide_player()
    for U j = 0; j < enemies_num;
        if overlap(enemy_rect(j), player_rect()) // If they collide:
            enemies_delete(j)
            phealth -= 1
        j += 1

fn update_sprites()
    // Our stack index into OAM:
    U o = 0

    //Score: 
    U i = 0
    do for U j = 0; j != len(score); j += 1
        o = i + (j << 2)
        oam{OAM_X + o} = 152 - (j << 3)
        oam{OAM_Y + o} = 16
        oam{OAM_P + o} = score[j] | $10
        oam{OAM_A + o} = 1
    //health
    if phealth > 0
        o = push_oam(o, 152, 200, $02, 1) //G
        if phealth > 1
            o = push_oam(o, 160, 200, $02, 1) //G
            if phealth > 2
                o = push_oam(o, 168, 200, $02, 1) //G
    // Player:
    //set_oam(o, px.a, py.a - 1, $00, 0)
    o = push_oam_metasprite_a(o, px.a, py.a, @my_metasprite, 0)
    //o += 4

    // Bullets:
    for U i = 0; i < bullets_num; i += 1
        set_oam(o, bullets[i].x.a, bullets[i].y.a - 1, $30, 1)
        o += 4

    // Enemies:
    for U i = 0; i < enemies_num; i += 1
        set_oam(o, enemies[i].x.a, enemies[i].y.a - 1, $31, 2)
        o += 4
    
    //life
    

    // Clear the remainder of OAM
    hide_oam(o)

nmi game_nmi()
    // Update OAM and poll the pads:
    ppu_upload_oam_poll_pads(0)

    // Turn on rendering:
    {PPUMASK}(PPUMASK_SPR_ON | PPUMASK_NO_CLIP)

    // Reset the scroll
    ppu_reset_scroll(0, 0)
    //music
    puf.process(PUF_DEFAULT)